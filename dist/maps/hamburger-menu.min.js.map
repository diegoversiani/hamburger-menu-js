{"version":3,"sources":["hamburger-menu-src.js"],"names":["root","factory","define","amd","exports","module","HamburgerMenu","global","this","window","defaults","defaultState","stateElement","stateActiveClass","stateInactiveClass","bodyClass","bodyClassActive","toggleButton","toggleButtonActiveClass","hamburgerMenuInit","CustomEvent","detail","bubbles","hamburgerMenuDestroy","hamburgerMenuOpenBefore","hamburgerMenuOpenAfter","hamburgerMenuCloseBefore","hamburgerMenuCloseAfter","extend","extended","deep","i","length","arguments","Object","prototype","toString","call","obj","prop","hasOwnProperty","selector","options","_settings","_stateElement","_toggleButton","publicMethods","handleDocumentClick","e","target","closest","toggle","getState","classList","contains","init","document","querySelector","open","close","setAttribute","id","addEventListener","body","add","dispatchEvent","destroy","remove","removeEventListener"],"mappings":"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","file":"../hamburger-menu.min.js","sourcesContent":["/**\n * Hamburger Menu\n * \n * File hamburger-menu.js.\n *\n * Instantiable plugin for a hamburger menu.\n *\n * Website: https://diegoversiani.me/hamburger-menu-js\n * Github: https://github.com/diegoversiani/hamburger-menu-js\n * \n * Author: Diego Versiani\n * Contact: https://diegoversiani.me\n *\n * Depends on:\n * shared/polyfill-closest.js\n * shared/polyfill-CustomEvents.js\n */\n(function (root, factory) {\n  if ( typeof define === 'function' && define.amd ) {\n    define([], factory(root));\n  } else if ( typeof exports === 'object' ) {\n    module.exports = factory(root);\n  } else {\n    root.HamburgerMenu = factory(root);\n  }\n})(typeof global !== 'undefined' ? global : this.window || this.global, function (root) {\n\n  'use strict';\n\n  //\n  // Constants\n  //\n\n  var STATE_ACTIVE = 'active',\n      STATE_INACTIVE = 'inactive',\n      ARIA_EXPANDED = 'aria-expanded',\n      ARIA_CONTROLS = 'aria-controls';\n\n\n\n  //\n  // Global Variables\n  //\n\n  var window = root; // Map window to root to avoid confusion\n\n\n  //\n  // Default settings\n  //\n\n  var defaults = {\n    defaultState: STATE_INACTIVE,\n    stateElement: '#menu',\n    stateActiveClass: 'is-active',\n    stateInactiveClass: '',\n    bodyClass: 'hamburger-menu',\n    bodyClassActive: 'hamburger-menu--active',\n    toggleButton: '#menu-toggle',\n    toggleButtonActiveClass: 'is-active',\n  };\n\n\n\n  //\n  // Custom Events\n  //\n\n  var hamburgerMenuInit = new CustomEvent( 'hamburger-menu-init', { detail: {}, bubbles: true } );\n  var hamburgerMenuDestroy = new CustomEvent( 'hamburger-menu-destroy', { detail: {}, bubbles: true } );\n  var hamburgerMenuOpenBefore = new CustomEvent( 'hamburger-menu-open-before', { detail: {}, bubbles: true } );\n  var hamburgerMenuOpenAfter = new CustomEvent( 'hamburger-menu-open-after', { detail: {}, bubbles: true } );\n  var hamburgerMenuCloseBefore = new CustomEvent( 'hamburger-menu-close-before', { detail: {}, bubbles: true } );\n  var hamburgerMenuCloseAfter = new CustomEvent( 'hamburger-menu-close-after', { detail: {}, bubbles: true } );\n\n\n\n  //\n  // Methods\n  //\n\n  /**\n   * Merge two or more objects. Returns a new object.\n   * @private\n   * @param {Boolean}  deep     If true, do a deep (or recursive) merge [optional]\n   * @param {Object}   objects  The objects to merge together\n   * @returns {Object}          Merged values of defaults and options\n   */\n  var extend = function () {\n    // Variables\n    var extended = {};\n    var deep = false;\n    var i = 0;\n    var length = arguments.length;\n\n    // Check if a deep merge\n    if ( Object.prototype.toString.call( arguments[0] ) === '[object Boolean]' ) {\n      deep = arguments[0];\n      i++;\n    }\n\n    // Merge the object into the extended object\n    var merge = function (obj) {\n      for ( var prop in obj ) {\n        if ( Object.prototype.hasOwnProperty.call( obj, prop ) ) {\n          // If deep merge and property is an object, merge properties\n          if ( deep && Object.prototype.toString.call(obj[prop]) === '[object Object]' ) {\n            extended[prop] = extend( true, extended[prop], obj[prop] );\n          } else {\n            extended[prop] = obj[prop];\n          }\n        }\n      }\n    };\n\n    // Loop through each object and conduct a merge\n    for ( ; i < length; i++ ) {\n      var obj = arguments[i];\n      merge(obj);\n    }\n\n    return extended;\n  };\n\n\n  //\n  // Constructor\n  //\n\n  /**\n   * Construct a new intance of the plugin.\n   */\n  var BuildHamburgerMenu = function ( selector, options ) {\n    var _settings,\n        _stateElement,\n        _toggleButton;\n    var publicMethods = {}; // Placeholder for public methods\n\n    /**\n     * Handle click on the document.\n     * @param  Event e Event data.\n     */\n    var handleDocumentClick = function ( e ) {\n      // Toggle menu button clicked\n      if ( e.target.closest( _settings.toggleButton ) ) {\n        publicMethods.toggle();\n      }\n    };\n\n    /**\n     * Return the current state.\n     * @return String Current state.\n     */\n    var getState = function () {\n      if ( _stateElement.classList.contains( _settings.stateActiveClass ) ) {\n        return STATE_ACTIVE;\n      }\n\n      return STATE_INACTIVE;\n    };\n\n\n\n    //\n    // Public Methods\n    //\n\n    /**\n     * Initializes plugin\n     */\n    publicMethods.init = function ( selector, options ) {\n      // Merge user options with defaults\n      _settings = extend( defaults, options || {} );\n\n      // Set stateElement using `selector` param\n      if ( selector ) { _settings.stateElement = selector; }\n      \n      // Get elements\n      _stateElement = document.querySelector( _settings.stateElement );\n      _toggleButton = document.querySelector( _settings.toggleButton );\n\n      // Bail early if stateElement not found\n      if ( !_stateElement ) { return; }\n\n      // Set default state\n      if ( _settings.defaultState == STATE_ACTIVE ) {\n        publicMethods.open();\n      }\n      else {\n        publicMethods.close();\n      }\n\n      // Set initial ARIA attributes\n      _toggleButton.setAttribute( ARIA_CONTROLS, _stateElement.id );\n\n      // Set event listeners\n      document.addEventListener( 'click', handleDocumentClick );\n\n      // Set body class\n      document.body.classList.add( _settings.bodyClass );\n\n      // Dispatch event `hamburger-menu-init`\n      _stateElement.dispatchEvent( hamburgerMenuInit );\n    };\n\n    /**\n     * Destroy the current instance.\n     */\n    publicMethods.destroy = function () {\n      // Remove body classes\n      document.body.classList.remove( _settings.bodyClassActive );\n      // TODO: Remove body (_settings.bodyClass) class when destroy, check for other instances.\n\n      // Remove state classes\n      _toggleButton.classList.remove( _settings.toggleButtonActiveClass );\n      _stateElement.classList.remove( _settings.stateActiveClass );\n      _stateElement.classList.remove( _settings.stateInactiveClass );\n\n      // Remove ARIA attributes\n      _toggleButton.setAttribute( ARIA_CONTROLS, '' );\n      _toggleButton.setAttribute( ARIA_EXPANDED, '' );\n      _stateElement.setAttribute( ARIA_EXPANDED, '' );\n\n      // Remove event listeners\n      document.removeEventListener( 'click', handleDocumentClick );\n\n      // Dispatch event `hamburger-menu-destroy`\n      _stateElement.dispatchEvent( hamburgerMenuDestroy );\n    };\n\n    /**\n     * Toggle menu state.\n     */\n    publicMethods.toggle = function () {\n      if ( getState() == STATE_INACTIVE ) {\n        publicMethods.open();\n        return;\n      }\n\n      // Close\n      publicMethods.close();\n    };\n\n    /**\n     * Open menu.\n     */\n    publicMethods.open = function () {\n      // Dispatch event `hamburger-menu-open-before`\n      _stateElement.dispatchEvent( hamburgerMenuOpenBefore );\n\n      // Body\n      document.body.classList.add( _settings.bodyClassActive );\n      \n      // State element\n      _stateElement.classList.remove( _settings.stateInactiveClass );\n      _stateElement.classList.add( _settings.stateActiveClass );\n      _stateElement.setAttribute( ARIA_EXPANDED, true );\n      \n      // Toggle button\n      _toggleButton.classList.add( _settings.toggleButtonActiveClass );\n      _toggleButton.setAttribute( ARIA_EXPANDED, true );\n\n      // Dispatch event `hamburger-menu-open-after`\n      _stateElement.dispatchEvent( hamburgerMenuOpenAfter );\n    };\n\n    /**\n     * Close menu.\n     */\n    publicMethods.close = function () {\n      // Dispatch event `hamburger-menu-close-before`\n      _stateElement.dispatchEvent( hamburgerMenuCloseBefore );\n\n      // Body\n      document.body.classList.remove( _settings.bodyClassActive );\n      \n      // State element\n      _stateElement.classList.remove( _settings.stateActiveClass );\n      _stateElement.classList.add( _settings.stateInactiveClass );\n      _stateElement.setAttribute( ARIA_EXPANDED, false );\n\n      // Toggle button\n      _toggleButton.classList.remove( _settings.toggleButtonActiveClass );\n      _toggleButton.setAttribute( ARIA_EXPANDED, false );\n\n      // Dispatch event `hamburger-menu-close-after`\n      _stateElement.dispatchEvent( hamburgerMenuCloseAfter );\n    };\n\n    // Initialize the instance\n    publicMethods.init( selector, options );\n\n    // Return the public methods of the instance\n    return publicMethods;\n  };\n\n\n  // Return the constructor\n  return BuildHamburgerMenu;\n\n});\n"]}